var searchIndex = JSON.parse('{\
"linked":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["LinkedList","Node","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","drop","eq","eq","extend","first","first_mut","fmt","fmt","from","from","from_iter","into","into","into_iter","iter","iter","iter_mut","last","last_mut","len","ne","ne","new","pop_back","pop_front","push_back","push_front","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","IntoIter","Iter","IterMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","from","from","from","into","into","into","into_iter","into_iter","into_iter","next","next","next","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["linked","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","linked::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["LinkedList is an implementation of a singly-linked-list.","","","","","","","","","","","","","","","View the first value in the linked list. This is O(1)","Modify the first value in the linked list. This is O(1)","","","","","","","","","","Create an iter over this linked list","Create a mutable iter over this linked list","View the last value in the linked list. This is O(n)","Modify the last value in the linked list. This is O(n)","Get the length of the linked list. This is an O(n) â€¦","","","Create a new empty linked list","Pop from the back of the linked list. This is O(n)","Pop from the front of the linked list. This is O(1)","Push to the back of the linked list. This is O(n)","Push to the front of the linked list. This is O(1)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,2,1,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,1,2,1,2,1,2,1,2,0,0,0,3,4,5,3,4,5,5,5,3,4,5,3,4,5,3,4,5,3,4,5,5,3,4,5,3,4,5,3,4,5],"f":[null,null,[[]],[[]],[[]],[[]],[[],["node",3]],[[],["linkedlist",3]],[[]],[[]],[[]],[[]],[[["node",3]],["bool",15]],[[["linkedlist",3]],["bool",15]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["intoiterator",8]]],[[]],[[]],[[]],null,[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[["node",3]],["bool",15]],[[["linkedlist",3]],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["iter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Node"],[3,"LinkedList"],[3,"IntoIter"],[3,"IterMut"],[3,"Iter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};